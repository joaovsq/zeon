plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.10'
}

group 'app.zeon'
version '0.1'

sourceCompatibility = 1.11

sourceSets {
    jmh {
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation('com.google.protobuf:protobuf-java-util:3.6.1')
    implementation('com.google.guava:guava:27.0.1-jre')
    implementation('com.google.crypto.tink:tink:1.2.2')

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    jmhCompile project
    jmhCompile 'org.openjdk.jmh:jmh-core:1.14.1'
    jmhCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.14.1'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

// jmh benchmark
//noinspection GroovyAssignabilityCheck
task jmh(type: JavaExec, description: 'Executing JMH benchmarks') {
    classpath = sourceSets.jmh.runtimeClasspath
    main = 'org.openjdk.jmh.Main'

    def include = project.properties.get('include', '');
    def exclude = project.properties.get('exclude');
    def format = project.properties.get('format', 'json');
    def profilers = project.properties.get('profilers');
    def jvmArgs = project.properties.get('jvmArgs')
    def verify =  project.properties.get('verify');

    def resultFile = file("build/reports/jmh/result.${format}")

    args include
    if(exclude) {
        args '-e', exclude
    }
    if(verify != null) { // execute benchmarks with the minimum amount of execution (only to check if they are working)
        println "≥≥ Running in verify mode"
        args '-f' , 1
        args '-wi' , 1
        args '-i' , 1
    }
    args '-foe', 'true'   //fail-on-error
    args '-v', 'NORMAL'   //verbosity [SILENT, NORMAL, EXTRA]
    if(profilers) {
        profilers.split(',').each {
            args '-prof', it
        }
    }
    args '-jvmArgsPrepend', '-Xmx3072m'
    args '-jvmArgsPrepend', '-Xms3072m'
    if(jvmArgs) {
        for(jvmArg in jvmArgs.split(' ')) {
            args '-jvmArgsPrepend', jvmArg
        }
    }
    args '-rf', format
    args '-rff', resultFile

    doFirst {
        println "\nExecuting JMH with: $args \n"
        resultFile.parentFile.mkdirs()
    }
}